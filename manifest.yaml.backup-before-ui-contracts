# Olympian AI-Native Codebase Manifest
# This file defines all feature boundaries and external touchpoints

version: '1.0.0'
name: 'olympian-ai-lightweight'
description: 'AI-Native chat interface with integrated MCP support'

# Core Domains and Features
domains:
  chat:
    features:
      - name: conversation-manager
        contract: features/chat/conversation-manager/contract.ts
        adapters:
          - database-adapter
          - websocket-adapter
        services:
          - conversation-service
        events:
          - conversation-created
          - conversation-updated
          - conversation-deleted
        config: config/features/chat/conversation-manager/schema.ts
        
      - name: message-processor
        contract: features/chat/message-processor/contract.ts
        adapters:
          - ollama-adapter
          - token-counter-adapter
        services:
          - message-service
          - streaming-service
        events:
          - message-sent
          - message-received
          - tokens-processed
        config: config/features/chat/message-processor/schema.ts

      - name: conversation-title-generator
        contract: features/chat/conversation-title-generator/contract.ts
        adapters:
          - ollama-title-adapter
          - prompt-adapter
        services:
          - title-generation-service
          - conversation-service
        events:
          - conversation-title-generated
        config: config/features/chat/conversation-title-generator/schema.ts
        
      - name: memory-manager
        contract: features/chat/memory-manager/contract.ts
        adapters:
          - context-adapter
          - token-budget-adapter
        services:
          - memory-service
        events:
          - context-updated
          - memory-cleaned
        config: config/features/chat/memory-manager/schema.ts

      - name: smart-model-router
        contract: features/chat/smart-model-router/contract.ts
        adapters:
          - content-analysis-adapter
          - model-selection-adapter
          - availability-adapter
        services:
          - model-registry-service
        events:
          - model-routed
          - routing-failed
        config: config/features/chat/smart-model-router/schema.ts

  mcp:
    features:
      - name: server-manager
        contract: features/mcp/server-manager/contract.ts
        adapters:
          - process-adapter
          - stdio-adapter
          - config-adapter
        services:
          - mcp-service
        events:
          - server-started
          - server-stopped
          - server-error
        config: config/features/mcp/server-manager/schema.ts
        
      - name: tool-executor
        contract: features/mcp/tool-executor/contract.ts
        adapters:
          - mcp-protocol-adapter
          - result-transformer-adapter
        services:
          - tool-service
        events:
          - tool-invoked
          - tool-completed
          - tool-failed
        config: config/features/mcp/tool-executor/schema.ts

  artifacts:
    features:
      - name: artifact-manager
        contract: features/artifacts/artifact-manager/contract.ts
        adapters:
          - artifact-storage-adapter
          - version-tracker-adapter
        services:
          - artifact-service
        events:
          - artifact-created
          - artifact-updated
          - artifact-deleted
        config: config/features/artifacts/artifact-manager/schema.ts

  ui:
    features:
      - name: dual-pane-layout
        contract: features/ui/dual-pane-layout/contract.ts
        adapters:
          - layout-persistence-adapter
        services:
          - layout-service
        events:
          - layout-changed
        config: config/features/ui/dual-pane-layout/schema.ts

      - name: text-model-selector
        contract: features/ui/text-model-selector/contract.ts
        adapters:
          - text-model-filter-adapter
          - selection-persistence-adapter
        services:
          - model-registry-service
        events:
          - text-model-selected
          - model-selection-failed
        config: config/features/ui/text-model-selector/schema.ts

      - name: vision-model-selector
        contract: features/ui/vision-model-selector/contract.ts
        adapters:
          - vision-model-filter-adapter
          - selection-persistence-adapter
        services:
          - model-registry-service
        events:
          - vision-model-selected
          - model-selection-failed
        config: config/features/ui/vision-model-selector/schema.ts

# External Dependencies (Services)
services:
  - name: conversation-service
    interface: services/conversation-service.ts
    
  - name: message-service
    interface: services/message-service.ts
    
  - name: streaming-service
    interface: services/streaming-service.ts
    
  - name: memory-service
    interface: services/memory-service.ts
    
  - name: mcp-service
    interface: services/mcp-service.ts
    
  - name: tool-service
    interface: services/tool-service.ts
    
  - name: artifact-service
    interface: services/artifact-service.ts
    
  - name: layout-service
    interface: services/layout-service.ts
    
  - name: model-registry-service
    interface: services/model-registry-service.ts

  - name: title-generation-service
    interface: services/title-generation-service.ts

# Event Contract
events:
  - name: conversation-created
    schema: events/conversation-created.ts
    
  - name: conversation-updated
    schema: events/conversation-updated.ts
    
  - name: conversation-deleted
    schema: events/conversation-deleted.ts

  - name: conversation-title-generated
    schema: events/conversation-title-generated.ts
    
  - name: message-sent
    schema: events/message-sent.ts
    
  - name: message-received
    schema: events/message-received.ts
    
  - name: tokens-processed
    schema: events/tokens-processed.ts
    
  - name: context-updated
    schema: events/context-updated.ts
    
  - name: memory-cleaned
    schema: events/memory-cleaned.ts

  - name: model-routed
    schema: events/model-routed.ts

  - name: routing-failed
    schema: events/routing-failed.ts
    
  - name: server-started
    schema: events/server-started.ts
    
  - name: server-stopped
    schema: events/server-stopped.ts
    
  - name: server-error
    schema: events/server-error.ts
    
  - name: tool-invoked
    schema: events/tool-invoked.ts
    
  - name: tool-completed
    schema: events/tool-completed.ts
    
  - name: tool-failed
    schema: events/tool-failed.ts
    
  - name: artifact-created
    schema: events/artifact-created.ts
    
  - name: artifact-updated
    schema: events/artifact-updated.ts
    
  - name: artifact-deleted
    schema: events/artifact-deleted.ts
    
  - name: layout-changed
    schema: events/layout-changed.ts
    
  - name: text-model-selected
    schema: events/text-model-selected.ts
    
  - name: vision-model-selected
    schema: events/vision-model-selected.ts
    
  - name: model-selection-failed
    schema: events/model-selection-failed.ts

# Models (Pure Types)
models:
  chat:
    - conversation.ts
    - message.ts
    - memory-context.ts
    
  mcp:
    - server-config.ts
    - tool-definition.ts
    - execution-result.ts
    
  ui:
    - layout-config.ts
    - model-selection.ts
    
  artifacts:
    - artifact.ts
    - version.ts

# Utilities (Pure Functions)
utilities:
  - name: token-counter
    interface: utils/token-counter.ts
    
  - name: context-manager
    interface: utils/context-manager.ts
    
  - name: config-parser
    interface: utils/config-parser.ts
    
  - name: process-manager
    interface: utils/process-manager.ts
    
  - name: protocol-handler
    interface: utils/protocol-handler.ts
    
  - name: artifact-validator
    interface: utils/artifact-validator.ts

# Package Configuration
packages:
  client:
    path: packages/client
    framework: react-typescript
    
  server:
    path: packages/server
    framework: node-express-typescript
    
  shared:
    path: packages/shared
    framework: typescript


# USER EXPERIENCE CONTRACTS
# Define how features orchestrate to achieve user goals

experience_contracts:
  journeys:
    - name: ai-development-assistance
      contract: experiences/journeys/ai-development-assistance.contract.ts
      description: Complete user journey for AI-assisted development
      success_criteria:
        - User achieves development goal faster than alone
        - User learns new concepts during interaction
        - User maintains flow state throughout session
        - User trusts AI recommendations
      
  interactions:
    - name: chat-flow
      contract: experiences/interactions/chat-flow.contract.ts
      description: How user actions flow through system features
      patterns:
        - Smart message processing with model routing
        - Seamless tool integration without friction
        - Invisible memory management
        - Persistent artifact lifecycle
      
  outcomes:
    - name: user-success
      contract: experiences/outcomes/user-success.contract.ts
      description: Measurable success criteria for user value
      metrics:
        - Task completion rate and time
        - Learning outcomes and skill growth
        - Experience quality and flow
        - Trust building and adoption
      
  workflows:
    - name: development-assistance
      contract: experiences/workflows/development-assistance.contract.ts
      description: Cross-feature coordination for user goals
      orchestrations:
        - intelligent-chat: conversation + processing + routing + memory
        - tool-integration: execution + conversation + artifacts
        - model-optimization: routing + text-selector + vision-selector
        - knowledge-capture: memory + artifacts + conversation

# EXPERIENCE-FEATURE MAPPING
# Ensures all features contribute to user goals

experience_integration:
  ai-development-assistance:
    primary_features:
      - conversation-manager
      - message-processor
      - smart-model-router
      - tool-executor
    supporting_features:
      - memory-manager
      - artifact-manager
      - model-selectors
    success_dependencies:
      - All features must coordinate seamlessly
      - User never sees technical complexity
      - Every interaction advances user goal
      - System learns and adapts to user patterns
