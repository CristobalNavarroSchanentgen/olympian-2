import express from "express";
import cors from "cors";
import helmet from "helmet";
import { createServer } from "http";
import { Server as SocketIOServer } from "socket.io";
import dotenv from "dotenv";

// Service implementations  
import { getDatabaseService } from "./database";
import { ConversationServiceImpl } from "./services/conversation-service-impl";
import { MessageServiceImpl } from "./services/message-service-impl";
import { ArtifactServiceImpl } from "./services/artifact-service-impl";
import { McpServiceImpl } from "./services/mcp-service-impl";
import { ModelRegistryServiceImpl } from "./services/model-registry-service-impl";

// Infrastructure
import { MCPManager } from "./mcp/mcp-manager-stub";
import { WebSocketHandler } from "./websocket/websocket-handler";
import { OllamaService } from "./services/ollama-service";

// API setup
import { setupAllRoutes, ApiServices } from "./api";

dotenv.config();

const app = express();
const server = createServer(app);
const io = new SocketIOServer(server, {
  cors: {
    origin: process.env.CLIENT_URL || "http://localhost:3000",
    methods: ["GET", "POST"]
  }
});

app.use(helmet());
app.use(cors({
  origin: process.env.CLIENT_URL || "http://localhost:3000"
}));
app.use(express.json({ limit: "50mb" }));
app.use(express.urlencoded({ extended: true, limit: "50mb" }));

async function startServer() {
  try {
    // Initialize database
    const dbService = getDatabaseService();
    await dbService.connect();
    console.log("📊 MongoDB connected and ready");

    // Initialize business logic services
    const conversationService = new ConversationServiceImpl();
    const messageService = new MessageServiceImpl();
    const artifactService = new ArtifactServiceImpl();
    const mcpService = new McpServiceImpl();
    const modelRegistryService = new ModelRegistryServiceImpl();
    
    console.log("💼 Business services initialized");

    // Initialize infrastructure services
    const mcpManager = new MCPManager();
    await mcpManager.initialize();
    console.log("🔧 MCP Manager initialized");

    const ollamaService = new OllamaService();
    console.log("🦙 Ollama service initialized");

    // Setup WebSocket handling
    const wsHandler = new WebSocketHandler(io, dbService, mcpManager, ollamaService);
    console.log("🔌 WebSocket handler initialized");

    // Setup all API routes with service injection
    const apiServices: ApiServices = {
      conversationService,
      messageService,
      artifactService,
      mcpService,
      modelRegistryService
    };
    
    setupAllRoutes(app, apiServices);

    const PORT = process.env.PORT || 3001;
    server.listen(PORT, () => {
      console.log(`🚀 Server running on port ${PORT}`);
    });

  } catch (error) {
    console.error("❌ Failed to start server:", error);
    process.exit(1);
  }
}

startServer();
